- Class: meta
  Course: Bio110
  Lesson: lesson_four
  Author: Paulette Bierzychudek
  Type: Standard
  Organization: Lewis & Clark College
  Version: 2.4.4

- Class: text
  Output: Welcome to Swirl lesson four, where you will learn the basics of graphing using boxplots. Boxplots are an excellent graphing option for many datasets, because they are valid regardless of whether or not the data are normally distributed. But they take a little getting used to, because they are not as commonly seen as bar graphs are.

- Class: text
  Output: We will work with the physiology dataset, called data, that you have already seen.

- Class: cmd_question
  Output: Type "data" for a reminder of the variables that it contains.
  CorrectAnswer: data
  AnswerTests: omnitest(correctExpr='data')
  Hint: Type a hint.

- Class: text
  Output: R has a function called plot, which makes a simple graph showing the relationship between an independent and a dependent variable.

- Class: text
  Output: When the independent variable is continuous, the plot command creates a scatterplot. When the independent variable is categorical, the plot command creates a boxplot.

- Class: text
  Output: "When data are in the form of numbers, R can treat them either as continuous (numeric variables, in R language) or as categorical (factor variables, in R language)."

- Class: text
  Output: "In 'data' the different measurements are categorized as having been made under either exercise (1) or resting (2) conditions."

- Class: text
  Output: Suppose you wanted to create a graph that compared the respiratory quotients (RQ) under these two conditions.

- Class: text
  Output: "The basic plot function has this form: plot(yourdata$xvariable, yourdata$yvariable). You would need to substitute the actual names for the dataset and variables used as place-holders here."

- Class: cmd_question
  Output: Use the plot function to graph the RQs of the two groups, exercise and resting.
  CorrectAnswer: plot(data$Condition, data$RQ)
  AnswerTests: omnitest(correctExpr='plot(data$Condition, data$RQ)')
  Hint: Remember that variable names are case-sensitive.

- Class: text
  Output: Notice that R has created a scatterplot, and that it is treating the Condition variable as continuous. Many of the dots representing the data values overlap with each other. For this reason, it is hard to see whether the central tendencies of the two conditions differ. A boxplot is a better choice for these data.

- Class: text
  Output: "If the Condition variable were a factor variable, R would make a boxplot instead. We can tell R to treat this variable as a factor by writing: data$Condition<-as.factor(data$Condition)"

- Class: cmd_question
  Output: Try it for yourself. Make Condition  a factor variable.
  CorrectAnswer: data$Condition<-as.factor(data$Condition)
  AnswerTests: omnitest(correctExpr='data$Condition<-as.factor(data$Condition)')
  Hint: Did you spell everything correctly?

- Class: cmd_question
  Output: "Now run the plot command again. Don't forget that you can use the 'up' arrow to recall a previous command and save some typing."
  CorrectAnswer: plot(data$Condition, data$RQ)
  AnswerTests: omnitest(correctExpr='plot(data$Condition, data$RQ)')
  Hint: Try plot(data$Condition,data$RQ)

- Class: text
  Output: "When R understands that the Condition variable is a factor or category, the 'plot' command creates a boxplot. The horizontal bars represent the medians of each group. The boxes represent the interquartile range, i.e. the middle 50% of all the data values."

- Class: mult_question
  Output: In which condition is the median respiratory quotient higher, exercise or resting?
  AnswerChoices: exercise; resting
  CorrectAnswer: exercise
  AnswerTests: omnitest(correctVal='resting')
  Hint: Remember that 1 represents the exercise condition and 2 represents the resting condition.

- Class: text
  Output: This boxplot is not very easy to read because the labels are not very clear. We can change the plotting parameters to improve its appearance. There are many ways to modify the plot command to add additional features. You can find out more about these by going to the plotting window at the lower right and clicking on the Help tab, and typing plot into the search box. We'll cover some of the most basic modifications in this tutorial.

- Class: text
  Output: "The axis labels should be self-explanatory. We can create axis labels by adding the xlab='' and ylab='' arguments to the plot command. Because these labels are character strings (i.e. lists of letters), we need to enclose them in quotation marks."

- Class: text
  Output: "You can add these terms to the plot command, within the parentheses. For example, you might write: plot(data$x, data$y, xlab='my x-axis label', ylab='my y-axis label')."

- Class: cmd_question
  Output: Try it yourself, with "Condition" as the x-axis label, and "RQ" as the y-axis label. Don't forget to put the text of these labels in quotation marks, and to use a comma to separate them.
  CorrectAnswer: plot(data$Condition, data$RQ, xlab="Condition", ylab="RQ")
  AnswerTests: omnitest(correctExpr='plot(data$Condition, data$RQ, xlab="Condition", ylab="RQ")')
  Hint: Remember that text is case-sensitive.

- Class: text
  Output: "But the labels are still not completely clear. It would be much clearer to replace the 1 and 2 with the labels 'exercise' and 'resting.' You can do this by adding the names=c('category name1', 'category name2', etc.) argument to the plot command."

- Class: cmd_question
  Output: Try it now, using "exercise" for the first category name, and "resting" for the second one. Put the names command in front of the arguments for the axis labels, and separate them with a comma.
  CorrectAnswer: plot(data$Condition, data$RQ, names=c("Resting","Exercise"), xlab="Condition",ylab="RQ")
  AnswerTests: omnitest(correctExpr='plot(data$Condition, data$RQ, names=c("Resting","Exercise"), xlab="Condition",ylab="RQ")')
  Hint: In this tutorial, R is looking for you to enter the arguments in a particular order. Try putting the names argument in front of the axis label argument -- this might be why you got an error message despite seeing the correct graph.

- Class: text
  Output: You might also want to use a wider range of values on the y-axis so that the figure has a little more elbow room. For example, the current y-axis starts at an RQ value of 0.85 and ends at a value of 1.0. Maybe you'd like it to range from 0.75 to 1.05 instead.

- Class: text
  Output: "You can do this by inserting the 'ylim=c(lowerlimit, upperlimit)' argument into the plot command like this: plot(data$x, data$y, ylim=c(0.75, 1.05))"

- Class: cmd_question
  Output: Try it now, adding these new ylimits to the plot you have already created with category and axis labels.
  CorrectAnswer: plot(data$Condition, data$RQ, names=c("exercise","resting"), xlab="Condition", ylab="RQ", ylim=c(0.75,1.05))
  AnswerTests: omnitest(correctExpr='plot(data$Condition, data$RQ, names=c("exercise","resting"), xlab="Condition", ylab="RQ", ylim=c(0.75,1.05))')
  Hint: Remember to put all text expressions in quotes. And R wants you to use the same case, upper or lower, as the instructions specify.

- Class: text
  Output: Hooray! You have completed lesson four. You have learned how to make and interpret a boxplot and how to modify the axis labels and the x- and y-limits. Lesson five  will teach you how to make a scatterplot.
